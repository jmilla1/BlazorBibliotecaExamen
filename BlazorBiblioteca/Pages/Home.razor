@page "/"
@using BlazorBiblioteca.Services

<h3>Gestión de Libros</h3>

<div class="container mt-4">
    @if (IsLoading)
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(AlertMessage))
    {
        <div class="alert @AlertClass" role="alert">
            @AlertMessage
        </div>
    }

    <button class="btn btn-primary mb-3" @onclick="OpenAddBookModal">Agregar Libro</button>

    <!-- Lista de Libros -->
    <h4>Lista de Libros</h4>
    <ul class="list-group">
        @if (Books != null && Books.Any())
        {
            @foreach (var book in Books)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>
                        <strong>@book.Title</strong> - @book.Author (@book.Pages páginas, Publicado el @book.PublishDate.ToShortDateString())
                    </span>
                    <div>
                        <button class="btn btn-warning btn-sm me-2" @onclick="() => OpenUpdateBookModal(book)">Actualizar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteModal(book)">Eliminar</button>
                    </div>
                </li>
            }
        }
        else
        {
            <li class="list-group-item">No hay libros disponibles.</li>
        }
    </ul>
</div>

<!-- Modal para Agregar/Actualizar Libro -->
@if (ShowBookModal)
{
    <div class="modal d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@ModalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseBookModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="bookTitle" class="form-label">Título del Libro</label>
                            <input type="text" class="form-control" id="bookTitle" placeholder="Ingresa el título del libro" @bind="Book.Title" />
                        </div>
                        <div class="mb-3">
                            <label for="author" class="form-label">Autor</label>
                            <input type="text" class="form-control" id="author" placeholder="Ingresa el autor" @bind="Book.Author" />
                        </div>
                        <div class="mb-3">
                            <label for="pages" class="form-label">Número de Páginas</label>
                            <input type="number" class="form-control" id="pages" placeholder="Ingresa el número de páginas" @bind="Book.Pages" />
                        </div>
                        <div class="mb-3">
                            <label for="publishDate" class="form-label">Fecha de Publicación</label>
                            <input type="date" class="form-control" id="publishDate" @bind="Book.PublishDate" />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseBookModal">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveOrUpdateBook">Guardar</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal para Confirmar Eliminación -->
@if (ShowDeleteModal)
{
    <div class="modal d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Eliminación</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Estás seguro de que deseas eliminar el libro <strong>@Book.Title</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteBook">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Book> Books = new();
    private Book Book = new();
    private string? AlertMessage;
    private string? AlertClass;
    private bool IsLoading;
    private bool ShowBookModal;
    private bool ShowDeleteModal;
    private string ModalTitle = "Agregar Libro";

    [Inject]
    private BookService BookService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        IsLoading = true;
        try
        {
            Books = await BookService.GetBooksAsync();
        }
        catch (Exception ex)
        {
            AlertMessage = $"Error al cargar los libros: {ex.Message}";
            AlertClass = "alert-danger";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void OpenAddBookModal()
    {
        Book = new Book();
        ModalTitle = "Agregar Libro";
        ShowBookModal = true;
    }

    private void OpenUpdateBookModal(Book book)
    {
        Book = new Book
        {
            Id = book.Id,
            Title = book.Title,
            Author = book.Author,
            Pages = book.Pages,
            PublishDate = book.PublishDate
        };
        ModalTitle = "Actualizar Libro";
        ShowBookModal = true;
    }

    private async Task SaveOrUpdateBook()
    {
        try
        {
            if (Book.Id == 0)
            {
                await BookService.CreateBookAsync(Book);
                AlertMessage = "Libro agregado correctamente.";
            }
            else
            {
                await BookService.UpdateBookAsync(Book);
                AlertMessage = "Libro actualizado correctamente.";
            }
            AlertClass = "alert-success";
            await LoadBooks();
            CloseBookModal();
        }
        catch (Exception ex)
        {
            AlertMessage = $"Error: {ex.Message}";
            AlertClass = "alert-danger";
        }
    }

    private void OpenDeleteModal(Book book)
    {
        Book = book;
        ShowDeleteModal = true;
    }

    private async Task DeleteBook()
    {
        try
        {
            await BookService.DeleteBookAsync(Book.Id);
            AlertMessage = "Libro eliminado correctamente.";
            AlertClass = "alert-success";
            await LoadBooks();
        }
        catch (Exception ex)
        {
            AlertMessage = $"Error al eliminar el libro: {ex.Message}";
            AlertClass = "alert-danger";
        }
        finally
        {
            CloseDeleteModal();
        }
    }

    private void CloseBookModal()
    {
        ShowBookModal = false;
    }

    private void CloseDeleteModal()
    {
        ShowDeleteModal = false;
    }
}